ORM (Object Relational Mapping)

MTV (MVC)
모델(모델) / 템플릿(뷰) / 뷰(컨트롤러)

데이터베이스 기본 구조

쿼리 : 데이터를 질의 하는 조회하는 명령어
db : 체계화된 데이터의 모임
스키마 : 디비 자료의 구조, 표현방법, 관계 정의한 구조
테이블
 - 필드 : 컬럼
 - 레코드 : 데이터

장점
 SQL을 몰라도 사용이 가능하다
 코드의 가독성이 증가한다.
 객체 지향적인 접근으로 생산성이 증가한다.
 매핑 정보가 명확하여 ERD를 보는것에 대한 의존도를 낮출수 있다.
 ORM은 독립적으로 작성되어 있고, 해당객체들을 재활용 할 수 있다.
 그렇기 때문에 모델에서 가공된 데이터를 컨트롤러(views.py)에 의해 
 뷰(templates)와 합쳐지는 형태로 디자인 패턴을 견고하게 다지는데 유리

단점
 모든것을 ORM으로 구현하기 어려움
 사용은 편하나 설계에는 신중해야함
 구조가 복잡해지면 난이도가 상승할 수 있다.
 잘못 구현되면 속도 저하 및 일관성이 무너질 수 있다.



Model (models.py)
 모델은 단일 데이터에 대한 정보를 가지고 있어요.
 필수적인 필드(컬럼)과 데이터(레코드)에 대한 정보를 포함
 각각의 모델은 각각 DB 테이블과 매핑
 사용자가 저장하는 데이터들의 필수적인 필드(컬럼) 동작을 포함


변경순서
 1. models.py 를 작성
 2. makemigrations : migration 파일(명세서) 생성
 3. migrate : 실제 적용되는 부분


데이터 객체(DB에 저장)를 만드는 3가지 방법

1. 첫번째 방식
 board = Board() 
 board.title = "값"
 board.save()

2. 두번째 방식
 board = Board(title="값", content="값")
 board.save()

3. 세번째 방식 
 board = Board.objects.create(title="값", content="값")

실습 ) 
1. 서브웨이 폼에서 받은 데이터를 DB에 넣어보자.
2. DB 에서 데이터를 받아와 보여줘 보자.

1.
서브웨이 폼에 어떤 데이터가 저장되는지 파악
그 데이터를 models.py 정의 (class Subway)
db에 생성(migrate)
데이터를 받아서 저장하는 부분을 완성

2. 
DB에서 데이터 전체를 불러와 페이지에 간결하게 뿌려보자.

3. 
URL에서 ID값을 받아와서 그 ID의 정보만 간결하게 뿌려보자.



